import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import urllib.parse
from sqlalchemy import create_engine

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Crit√©rios Avaliativos",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo do dashboard
st.title("üìä An√°lise Detalhada de Crit√©rios Avaliativos")

database_url = st.secrets["DB_URL"]
@st.cache_resource
def get_connection():
    # Usar diretamente a URL completa
    return create_engine(database_url)


# Fun√ß√£o para executar consultas
def executar_consulta(query):
    try:
        conn = get_connection()
        return pd.read_sql(query, conn)
    except Exception as e:
        st.error(f"Erro ao executar consulta: {e}")
        st.code(query)  # Mostra a consulta com erro para depura√ß√£o
        return None

# Fun√ß√£o para carregar dados detalhados das categorias espec√≠ficas
def carregar_dados_categorias():
    query = """
    SELECT 
        e.id AS entidade_id,
        e.nome AS nome_entidade,
        
        -- Total de crit√©rios
        COUNT(DISTINCT ca.id) AS total_criterios,
        
        -- Crit√©rios com f√≥rmula personalizada
        SUM(CASE WHEN ca.formula_personalizada IS NOT NULL THEN 1 ELSE 0 END) AS formula_personalizada,
        
        -- Crit√©rios de grupo
        SUM(CASE WHEN ca.criterio_calculo_grupo_id IS NOT NULL AND ca.possui_criterios_grupos = true THEN 1 ELSE 0 END) AS criterio_grupo,
        
        -- Crit√©rios de grupo com recupera√ß√£o paralela
        SUM(CASE WHEN ca.criterio_calculo_grupo_id IS NOT NULL 
                  AND ca.possui_criterios_grupos = true 
                  AND ca.possui_recuperacao_paralela = true THEN 1 ELSE 0 END) AS grupo_rec_paralela,
        
        -- Crit√©rios de grupo com recupera√ß√£o semestral
        SUM(CASE WHEN ca.criterio_calculo_grupo_id IS NOT NULL 
                  AND ca.possui_criterios_grupos = true 
                  AND ca.possui_recuperacao_semestral = true THEN 1 ELSE 0 END) AS grupo_rec_semestral,
        
        -- Crit√©rios com f√≥rmula personalizada com recupera√ß√£o paralela
        SUM(CASE WHEN ca.formula_personalizada IS NOT NULL 
                  AND ca.possui_recuperacao_paralela = true THEN 1 ELSE 0 END) AS formula_rec_paralela,
        
        -- Crit√©rios com f√≥rmula personalizada com recupera√ß√£o semestral
        SUM(CASE WHEN ca.formula_personalizada IS NOT NULL 
                  AND ca.possui_recuperacao_semestral = true THEN 1 ELSE 0 END) AS formula_rec_semestral
        
    FROM 
        entidades e
    LEFT JOIN 
        criterios_avaliativos ca ON ca.entidade_id = e.id
    GROUP BY 
        e.id, e.nome
    HAVING 
        COUNT(DISTINCT ca.id) > 0
    ORDER BY 
        total_criterios DESC
    """
    return executar_consulta(query)

# Fun√ß√£o para carregar dados de matr√≠culas por entidade
def carregar_dados_matriculas():
    query = """
    SELECT 
        e.id AS entidade_id,
        e.nome AS nome_entidade,
        COUNT(DISTINCT m.id) AS total_matriculas,
        COUNT(DISTINCT t.id) AS total_turmas
    FROM 
        entidades e
    LEFT JOIN 
        turmas t ON t.entidade_id = e.id
    LEFT JOIN 
        matriculas m ON m.turma_id = t.id
    GROUP BY 
        e.id, e.nome
    ORDER BY 
        total_matriculas DESC
    """
    return executar_consulta(query)

# Carregar dados
with st.spinner("Carregando dados detalhados..."):
    # Carregar categorias de crit√©rios
    df_categorias = carregar_dados_categorias()
    
    # Carregar matr√≠culas
    df_matriculas = carregar_dados_matriculas()
    
    if df_categorias is not None and df_matriculas is not None:
        # Mesclar os dados
        df_completo = pd.merge(
            df_categorias,
            df_matriculas[['entidade_id', 'total_matriculas', 'total_turmas']],
            on='entidade_id',
            how='left'
        )
        
        # Preencher valores nulos com zeros
        df_completo.fillna(0, inplace=True)
        
        # Calcular alguns campos derivados
        df_completo['percentual_formula'] = (df_completo['formula_personalizada'] / df_completo['total_criterios'] * 100).round(1)
        df_completo['percentual_grupo'] = (df_completo['criterio_grupo'] / df_completo['total_criterios'] * 100).round(1)
        
        st.success(f"‚úÖ Dados carregados com sucesso! Analisando {len(df_completo)} entidades.")
        
        # Filtros na barra lateral
        st.sidebar.header("Filtros")
        
        # Filtro por nome de entidade
        todas_entidades = df_completo['nome_entidade'].unique()
        entidades_selecionadas = st.sidebar.multiselect(
            "Filtrar por entidades espec√≠ficas",
            options=todas_entidades,
            default=[]
        )
        
        # Filtro por quantidade m√≠nima de matr√≠culas
        min_matriculas = st.sidebar.slider(
            "Quantidade m√≠nima de matr√≠culas",
            min_value=0,
            max_value=int(df_completo['total_matriculas'].max()),
            value=0
        )
        
        # Filtro por quantidade m√≠nima de crit√©rios
        min_criterios = st.sidebar.slider(
            "Quantidade m√≠nima de crit√©rios",
            min_value=1,
            max_value=int(df_completo['total_criterios'].max()),
            value=1
        )
        
        # N√∫mero de entidades a exibir nos gr√°ficos
        num_entidades = st.sidebar.slider(
            "Entidades a exibir nos gr√°ficos",
            min_value=5,
            max_value=100,
            value=30
        )
        
        # Aplicar filtros
        df_filtrado = df_completo.copy()
        
        if entidades_selecionadas:
            df_filtrado = df_filtrado[df_filtrado['nome_entidade'].isin(entidades_selecionadas)]
        
        df_filtrado = df_filtrado[df_filtrado['total_matriculas'] >= min_matriculas]
        df_filtrado = df_filtrado[df_filtrado['total_criterios'] >= min_criterios]
        
        # Informar n√∫mero de entidades ap√≥s filtros
        st.sidebar.info(f"Exibindo {len(df_filtrado)} entidades ap√≥s filtros")
        
        # Resumo das categorias espec√≠ficas
        st.header("Resumo por Categoria")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_criterios = df_filtrado['total_criterios'].sum()
            st.metric("Total de Crit√©rios", int(total_criterios))
            
            total_formula = df_filtrado['formula_personalizada'].sum()
            perc_formula = (total_formula / total_criterios * 100).round(1) if total_criterios > 0 else 0
            st.metric("Com F√≥rmula Personalizada", f"{int(total_formula)} ({perc_formula}%)")
            
            total_grupo = df_filtrado['criterio_grupo'].sum()
            perc_grupo = (total_grupo / total_criterios * 100).round(1) if total_criterios > 0 else 0
            st.metric("Crit√©rios de Grupo", f"{int(total_grupo)} ({perc_grupo}%)")
        
        with col2:
            total_grupo_paralela = df_filtrado['grupo_rec_paralela'].sum()
            perc_grupo_paralela = (total_grupo_paralela / total_grupo * 100).round(1) if total_grupo > 0 else 0
            st.metric("Grupo com Rec. Paralela", f"{int(total_grupo_paralela)} ({perc_grupo_paralela}%)")
            
            total_grupo_semestral = df_filtrado['grupo_rec_semestral'].sum()
            perc_grupo_semestral = (total_grupo_semestral / total_grupo * 100).round(1) if total_grupo > 0 else 0
            st.metric("Grupo com Rec. Semestral", f"{int(total_grupo_semestral)} ({perc_grupo_semestral}%)")
        
        with col3:
            total_formula_paralela = df_filtrado['formula_rec_paralela'].sum()
            perc_formula_paralela = (total_formula_paralela / total_formula * 100).round(1) if total_formula > 0 else 0
            st.metric("F√≥rmula com Rec. Paralela", f"{int(total_formula_paralela)} ({perc_formula_paralela}%)")
            
            total_formula_semestral = df_filtrado['formula_rec_semestral'].sum()
            perc_formula_semestral = (total_formula_semestral / total_formula * 100).round(1) if total_formula > 0 else 0
            st.metric("F√≥rmula com Rec. Semestral", f"{int(total_formula_semestral)} ({perc_formula_semestral}%)")
        
        # Resumo de matr√≠culas
        col1, col2 = st.columns(2)
        
        with col1:
            total_matriculas = df_filtrado['total_matriculas'].sum()
            st.metric("Total de Matr√≠culas", f"{int(total_matriculas):,}".replace(",", "."))
        
        with col2:
            total_turmas = df_filtrado['total_turmas'].sum()
            st.metric("Total de Turmas", int(total_turmas))
        
        # Abas para diferentes an√°lises
        tab1, tab2, tab3 = st.tabs(["Vis√£o Geral", "An√°lise por Categoria", "An√°lise por Entidade"])
        
        with tab1:
            st.header("Vis√£o Geral dos Crit√©rios")
            
            # Criar dados para o gr√°fico de pizza das categorias
            dados_pizza = {
                'Categoria': [
                    'F√≥rmula Personalizada com Rec. Paralela',
                    'F√≥rmula Personalizada com Rec. Semestral',
                    'F√≥rmula Personalizada (outros)',
                    'Crit√©rio de Grupo com Rec. Paralela',
                    'Crit√©rio de Grupo com Rec. Semestral',
                    'Crit√©rio de Grupo (outros)',
                    'Outros Crit√©rios'
                ],
                'Quantidade': [
                    total_formula_paralela,
                    total_formula_semestral,
                    total_formula - total_formula_paralela - total_formula_semestral,
                    total_grupo_paralela,
                    total_grupo_semestral,
                    total_grupo - total_grupo_paralela - total_grupo_semestral,
                    total_criterios - total_formula - total_grupo
                ]
            }
            
            df_pizza = pd.DataFrame(dados_pizza)
            
            # Remover categorias com zero
            df_pizza = df_pizza[df_pizza['Quantidade'] > 0]
            
            # Gr√°fico de pizza das categorias
            fig_pizza = px.pie(
                df_pizza,
                values='Quantidade',
                names='Categoria',
                title='Distribui√ß√£o dos Crit√©rios por Categoria',
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            st.plotly_chart(fig_pizza, use_container_width=True)
            
            # Top entidades por matr√≠culas
            st.subheader(f"Top {num_entidades} Entidades por Matr√≠culas")
            
            df_top_matriculas = df_filtrado.sort_values('total_matriculas', ascending=False).head(num_entidades)
            
            fig_matriculas = px.bar(
                df_top_matriculas,
                x='nome_entidade',
                y='total_matriculas',
                title=f'Top {num_entidades} Entidades por N√∫mero de Matr√≠culas',
                labels={'nome_entidade': 'Entidade', 'total_matriculas': 'Total de Matr√≠culas'}
            )
            fig_matriculas.update_layout(xaxis={'categoryorder':'total descending'})
            st.plotly_chart(fig_matriculas, use_container_width=True)
        
        with tab2:
            st.header("An√°lise por Categoria")
            
            # Seletor de categoria para an√°lise
            categoria_selecionada = st.selectbox(
                "Selecione a categoria para an√°lise detalhada",
                [
                    "F√≥rmula Personalizada",
                    "Crit√©rios de Grupo",
                    "Grupo com Recupera√ß√£o Paralela",
                    "Grupo com Recupera√ß√£o Semestral",
                    "F√≥rmula com Recupera√ß√£o Paralela",
                    "F√≥rmula com Recupera√ß√£o Semestral"
                ]
            )
            
            # Mapeamento de categoria para coluna
            mapa_categorias = {
                "F√≥rmula Personalizada": "formula_personalizada",
                "Crit√©rios de Grupo": "criterio_grupo",
                "Grupo com Recupera√ß√£o Paralela": "grupo_rec_paralela",
                "Grupo com Recupera√ß√£o Semestral": "grupo_rec_semestral",
                "F√≥rmula com Recupera√ß√£o Paralela": "formula_rec_paralela",
                "F√≥rmula com Recupera√ß√£o Semestral": "formula_rec_semestral"
            }
            
            coluna_categoria = mapa_categorias[categoria_selecionada]
            
            # Top entidades para a categoria selecionada
            df_top_categoria = df_filtrado.sort_values(coluna_categoria, ascending=False).head(num_entidades)
            
            # Gr√°fico de barras para a categoria selecionada
            fig_categoria = px.bar(
                df_top_categoria,
                x='nome_entidade',
                y=coluna_categoria,
                title=f'Top {num_entidades} Entidades com Mais {categoria_selecionada}',
                labels={'nome_entidade': 'Entidade', coluna_categoria: f'Quantidade de {categoria_selecionada}'}
            )
            fig_categoria.update_layout(xaxis={'categoryorder':'total descending'})
            st.plotly_chart(fig_categoria, use_container_width=True)
            
            # Rela√ß√£o entre a categoria selecionada e matr√≠culas
            fig_relacao = px.scatter(
                df_filtrado[df_filtrado[coluna_categoria] > 0],
                x=coluna_categoria,
                y='total_matriculas',
                size='total_matriculas',
                color='total_criterios',
                hover_name='nome_entidade',
                title=f'Rela√ß√£o entre {categoria_selecionada} e Matr√≠culas',
                labels={
                    coluna_categoria: f'Quantidade de {categoria_selecionada}',
                    'total_matriculas': 'Total de Matr√≠culas',
                    'total_criterios': 'Total de Crit√©rios'
                }
            )
            st.plotly_chart(fig_relacao, use_container_width=True)
            
            # Tabela das entidades com essa categoria
            st.subheader(f"Entidades com {categoria_selecionada}")
            
            df_categoria = df_filtrado[df_filtrado[coluna_categoria] > 0].sort_values(coluna_categoria, ascending=False)
            
            # Preparar para exibi√ß√£o
            df_display_cat = df_categoria[['nome_entidade', 'total_criterios', coluna_categoria, 'total_matriculas', 'total_turmas']]
            df_display_cat['percentual'] = (df_display_cat[coluna_categoria] / df_display_cat['total_criterios'] * 100).round(1)
            
            # Renomear colunas
            df_display_cat = df_display_cat.rename(columns={
                'nome_entidade': 'Entidade',
                'total_criterios': 'Total de Crit√©rios',
                coluna_categoria: categoria_selecionada,
                'total_matriculas': 'Total de Matr√≠culas',
                'total_turmas': 'Total de Turmas',
                'percentual': f'% {categoria_selecionada}'
            })
            
            st.dataframe(df_display_cat, use_container_width=True)
        
        with tab3:
            st.header("An√°lise por Entidade")
            
            # Filtrar ainda mais para entidades espec√≠ficas
            if len(df_filtrado) > 1:
                entidade_analise = st.selectbox(
                    "Selecione uma entidade para an√°lise detalhada",
                    options=df_filtrado['nome_entidade'].tolist(),
                    index=0
                )
            
                # Filtrar para a entidade selecionada
                df_entidade = df_filtrado[df_filtrado['nome_entidade'] == entidade_analise].iloc[0]
                
                # Exibir m√©tricas da entidade
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Total de Crit√©rios", int(df_entidade['total_criterios']))
                    st.metric("Total de Matr√≠culas", int(df_entidade['total_matriculas']))
                    st.metric("Total de Turmas", int(df_entidade['total_turmas']))
                
                with col2:
                    st.metric("F√≥rmulas Personalizadas", int(df_entidade['formula_personalizada']))
                    st.metric("F√≥rmula com Rec. Paralela", int(df_entidade['formula_rec_paralela']))
                    st.metric("F√≥rmula com Rec. Semestral", int(df_entidade['formula_rec_semestral']))
                
                with col3:
                    st.metric("Crit√©rios de Grupo", int(df_entidade['criterio_grupo']))
                    st.metric("Grupo com Rec. Paralela", int(df_entidade['grupo_rec_paralela']))
                    st.metric("Grupo com Rec. Semestral", int(df_entidade['grupo_rec_semestral']))
                
                # Gr√°fico de radar para visualizar todas as categorias
                categorias = [
                    'F√≥rmula Personalizada',
                    'F√≥rmula c/ Rec. Paralela',
                    'F√≥rmula c/ Rec. Semestral',
                    'Crit√©rios de Grupo',
                    'Grupo c/ Rec. Paralela',
                    'Grupo c/ Rec. Semestral'
                ]
                
                valores = [
                    df_entidade['formula_personalizada'],
                    df_entidade['formula_rec_paralela'],
                    df_entidade['formula_rec_semestral'],
                    df_entidade['criterio_grupo'],
                    df_entidade['grupo_rec_paralela'],
                    df_entidade['grupo_rec_semestral']
                ]
                
                # Criar gr√°fico de radar
                fig_radar = go.Figure()
                
                fig_radar.add_trace(go.Scatterpolar(
                    r=valores,
                    theta=categorias,
                    fill='toself',
                    name=entidade_analise
                ))
                
                fig_radar.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, max(valores) * 1.1]
                        )
                    ),
                    title=f"Perfil de Crit√©rios Avaliativos de {entidade_analise}"
                )
                
                st.plotly_chart(fig_radar, use_container_width=True)
                
                # Gr√°fico de barras comparando as categorias
                df_barras = pd.DataFrame({
                    'Categoria': categorias,
                    'Quantidade': valores
                })
                
                fig_barras = px.bar(
                    df_barras,
                    x='Categoria',
                    y='Quantidade',
                    title=f"Distribui√ß√£o de Crit√©rios em {entidade_analise}",
                    labels={'Quantidade': 'N√∫mero de Crit√©rios'}
                )
                
                st.plotly_chart(fig_barras, use_container_width=True)
            else:
                st.info("Selecione pelo menos uma entidade nos filtros para ver a an√°lise detalhada.")
        
        # Tabela completa com todas as categorias
        st.header("Tabela Completa de Crit√©rios Avaliativos")
        
        # Preparar para exibi√ß√£o
        df_display = df_filtrado.copy()
        df_display = df_display.rename(columns={
            'nome_entidade': 'Entidade',
            'total_criterios': 'Total de Crit√©rios',
            'formula_personalizada': 'F√≥rmula Personalizada',
            'criterio_grupo': 'Crit√©rios de Grupo',
            'grupo_rec_paralela': 'Grupo com Rec. Paralela',
            'grupo_rec_semestral': 'Grupo com Rec. Semestral',
            'formula_rec_paralela': 'F√≥rmula com Rec. Paralela',
            'formula_rec_semestral': 'F√≥rmula com Rec. Semestral',
            'total_matriculas': 'Total de Matr√≠culas',
            'total_turmas': 'Total de Turmas'
        })
        
        # Remover coluna de ID para exibi√ß√£o
        df_display = df_display.drop(columns=['entidade_id'])
        
        # Op√ß√µes de ordena√ß√£o
        opcoes_ordenacao = {
            "Total de Crit√©rios": "Total de Crit√©rios",
            "Total de Matr√≠culas": "Total de Matr√≠culas",
            "F√≥rmulas Personalizadas": "F√≥rmula Personalizada",
            "Crit√©rios de Grupo": "Crit√©rios de Grupo"
        }
        
        coluna_ordenacao = st.selectbox(
            "Ordenar tabela por",
            options=list(opcoes_ordenacao.keys()),
            index=0
        )
        
        # Aplicar ordena√ß√£o
        df_display = df_display.sort_values(opcoes_ordenacao[coluna_ordenacao], ascending=False)
        
        # Exibir tabela
        st.dataframe(df_display, use_container_width=True)
        
        # Bot√£o para download dos dados
        csv = df_display.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download dos dados como CSV",
            data=csv,
            file_name="criterios_avaliativos_detalhados.csv",
            mime="text/csv",
        )
    else:
        st.error("N√£o foi poss√≠vel carregar os dados necess√°rios para a an√°lise.")